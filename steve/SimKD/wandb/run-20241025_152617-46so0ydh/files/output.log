Use GPU: 0 for training
==> loading teacher model
D:\Uni\student-research-project\steve\SimKD\train_student.py:300: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(model_path, map_location=map_location)["model"])
==> done
6 1.0
Files already downloaded and verified
Files already downloaded and verified
Test: [0/313]	GPU: 0	Time: 11.241	Loss 0.7320	Acc@1 81.250	Acc@5 90.625
Test: [200/313]	GPU: 0	Time: 12.874	Loss 0.8817	Acc@1 79.260	Acc@5 94.527
teacher accuracy:  79.42
==> training...
Traceback (most recent call last):
  File "D:\Uni\student-research-project\steve\SimKD\train_student.py", line 683, in <module>
    main()
  File "D:\Uni\student-research-project\steve\SimKD\train_student.py", line 327, in main
    main_worker(None if ngpus_per_node > 1 else opt.gpu_id, ngpus_per_node, opt)
  File "D:\Uni\student-research-project\steve\SimKD\train_student.py", line 579, in main_worker
    train_acc, train_acc_top5, train_loss = train(
                                            ^^^^^^
  File "D:\Uni\student-research-project\steve\SimKD\helper\loops.py", line 216, in train_distill
    loss.backward()
  File "D:\programming\miniconda3\envs\SRP_steve\Lib\site-packages\torch\_tensor.py", line 521, in backward
    torch.autograd.backward(
  File "D:\programming\miniconda3\envs\SRP_steve\Lib\site-packages\torch\autograd\__init__.py", line 289, in backward
    _engine_run_backward(
  File "D:\programming\miniconda3\envs\SRP_steve\Lib\site-packages\torch\autograd\graph.py", line 769, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: one of the variables needed for gradient computation has been modified by an inplace operation: [torch.cuda.FloatTensor [64, 256, 2, 2]], which is output 0 of ReluBackward0, is at version 2; expected version 1 instead. Hint: enable anomaly detection to find the operation that failed to compute its gradient, with torch.autograd.set_detect_anomaly(True).
